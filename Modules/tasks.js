//@ts-check

/**
 * @typedef {object} Task - An object representing a task to be shown to a user
 * @prop {string} id - A unique value generated by {@link createId} used to identify a task.
 * @prop {string} title - A short user-provided description of what the task entails
 * @prop {boolean} completed - Whether the task has been completed or not
 * @prop {Date} created - The exact date when the task was created in the system
 * @prop {null | Date} due - A user specified date for when the task should be completed
 * @prop {Urgency} urgency - A user specified indication of how important the task
 */

import { doesHtmlExist, getHtml, createUniqueId } from "./helpers.js";
import { Task } from "./state.js";
/**
 *
 * @param {string} id
 */
const addTaskToHtml = (id) => {
  const list = getHtml({ dataAttr: "list" });

  if (doesHtmlExist("task", id)) {
    throw new Error("Task with that Id already exist");
  }

  const preview = document.createElement("li");
  preview.className = "task";
  preview.dataset.task = id;
  preview.innerHTML = /* Html */ ` 
          <label class="task__check">
            <input class="task__input" data-checkbox type="checkbox" />
          </label>
          <button class="task__title" data-title >
          </button>

          <buttonclass="task__check" data-delete style="display:none"> </button>
          <label class="task__check">
            <svg
              class="task__icon"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 96 960 960"
          
            >
              <path
                d="M253 961q-40.212 0-67.606-27.1Q158 906.8 158 867V314h-58v-94h231v-48h297v48h232v94h-58v553q0 39.05-27.769 66.525Q746.463 961 707 961H253Zm454-647H253v553h454V314ZM354 789h77V390h-77v399Zm175 0h78V390h-78v399ZM253 314v553-553Z"
              ></path>
            </svg>
          </label>
      `;
  list.appendChild(preview);
};

/**
 *
 * @param {string} id
 * @param {Partial<Props>} changes
 */

const updateTaskHtml = (id, changes) => {
  const { completed, title } = changes;
  const element = getHtml({ dataAttr: "task", value: id });

  const hasCompleted = completed !== undefined;
  //const hasDue = due !== undefined
  const hasTitle = title !== undefined;
  //const hasUrgency = urgency !== undefined

  if (hasCompleted) {
    const inner = getHtml({ dataAttr: "checkbox", target: element });
    if (!("checked" in inner)) {
      throw new Error("Expected input element");
    }
    inner.checked = completed;
  }

  if (hasTitle) {
    const inner = getHtml({ dataAttr: "title", target: element });
    inner.innerHTML = title;
  }
};

/**
 *
 * @param {Omit<Props, 'completed'>} props
 * @returns {Task}
 */
export const createTask = (props) => {
  const id = createUniqueId();

  /**
   * @type {Task}
   */
  const state = {
    id,
    completed: false,
    created: new Date(),
    //title:
    ...props,
  };

  addTaskToHtml(id);

  updateTaskHtml(id, {
    completed: false,
    ...props,
  });

  return {
    get id() {
      return state.id;
    },

    set id(newValue) {
      throw new Error("cannot directly change id ");
    },

    get completed() {
      return state.completed;
    },
  
    set completed(newValue) {
      if (typeof newValue !== "boolean") {
        throw new Error('"completed" is not a boolean');
      }
      
      if (newValue !== state.completed) {
        state.completed = newValue;

        updateTaskHtml(id, {
          completed:newValue,
      
        });
      }
    },

    get created() {
      return state.created;
    },

    set created(newValue) {
      throw new Error("cannot directly change created");
    },

    get title() {
      return state.title;
    },

    set title(newValue) {
      if (!newValue || typeof newValue !== "string" || newValue.trim === "") {
        throw new Error('"title" is required to be a non-empty string ');
      }
      state.title= newValue

      updateTaskHtml(id, {
        title:newValue,
    
      })
    },

    get urgency() {
      return state.urgency;
    },

    set urgency(newValue) {
      /**
       * @type {Array<Urgency>}
       */
      const valid = ["high", "low", "medium"];
      if (!valid.includes(newValue)) {
        throw new Error("valid is required to be 'high', 'low', 'medium'");
      }
    },
    get due() {
      return state.due;
    },
    set due(newValue) {
      if (!(newValue instanceof Date)) {
        throw new Error("Due is requirred to be a date");
      }
      state.due = newValue;
    },
  };
};

export default createTask;
